// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name     String?
  image    String?
  phone    String?
  address  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   Order[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String   @db.Text
  price        Float
  originalPrice Float?
  images       String[]
  brand        String
  category     String
  size         String[]
  color        String[]
  inStock      Boolean  @default(true)
  rating       Float    @default(0)
  reviewCount  Int      @default(0)
  deliveryTime String   @default("2-4 hours")
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id             String   @id @default(cuid())
  userId         String
  totalAmount    Float
  deliveryFee    Float    @default(0)
  additionalFee  Float    @default(0)  // Home trial fee
  deliveryType   DeliveryType @default(INSTANT)
  trialWaitTime  Int?     // Wait time in minutes for home trial
  status         OrderStatus @default(PENDING)
  deliveryAddress Json
  deliveryTime   String
  estimatedDelivery DateTime? // ETA for delivery
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  paymentMethod  String
  paymentStatus  PaymentStatus @default(PENDING)

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  delivery  Delivery?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int
  size      String
  color     String
  image     String

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Delivery {
  id          String   @id @default(cuid())
  orderId     String   @unique
  status      DeliveryStatus @default(PENDING)
  deliveryPerson String?
  phone       String?
  estimatedTime DateTime?
  actualTime  DateTime?
  location    String?
  notes       String?
  partnerStore String? // Store name for pickup
  zone        String?   // Delivery zone (e.g., Banjara Hills, Gachibowli)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("deliveries")
}

enum DeliveryType {
  INSTANT
  HOME_TRIAL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
}